=== PYTHON VIRTUAL ENVIRONMENTS ===

DEFINITION:
A virtual environment is an isolated Python workspace that allows you to install packages
and dependencies for a specific project without affecting your system-wide Python installation
or other projects. Each virtual environment has its own Python interpreter and package
directory.

Think of virtual environments like separate apartments:
- Each apartment (project) has its own furniture (packages)
- Changes in one apartment don't affect others
- You can have different versions of the same furniture in different apartments
- You can easily move between apartments (activate/deactivate environments)

=== WHY USE VIRTUAL ENVIRONMENTS? ===

DEPENDENCY ISOLATION:
- Different projects can use different versions of the same package
- Prevents conflicts between project dependencies
- Keeps your system Python clean

REPRODUCIBILITY:
- Easy to recreate the same environment on different machines
- Share exact dependency versions with team members
- Consistent deployment environments

PROJECT ORGANIZATION:
- Each project has its own set of packages
- No clutter in global Python installation
- Easy to clean up by deleting the environment

=== MAIN TOOLS FOR VIRTUAL ENVIRONMENTS ===

1. VENV (Built-in, Python 3.3+):
   - Comes with Python installation
   - Lightweight and simple
   - Recommended for most use cases

2. VIRTUALENV:
   - Third-party tool, more features
   - Works with Python 2 and 3
   - More configuration options

3. CONDA:
   - Part of Anaconda/Miniconda
   - Manages both Python and non-Python packages
   - Good for data science projects

4. PIPENV:
   - Combines pip and virtualenv
   - Uses Pipfile instead of requirements.txt
   - Automatic dependency resolution

5. POETRY:
   - Modern dependency management
   - Handles packaging and publishing
   - Advanced dependency resolution

=== USING VENV (RECOMMENDED) ===

CREATE VIRTUAL ENVIRONMENT:
# Create environment in current directory
python -m venv myproject-env

# Create with specific name
python -m venv .venv

# Create in specific location
python -m venv C:\projects\myapp\venv

ACTIVATE ENVIRONMENT:
# Windows (Command Prompt)
myproject-env\Scripts\activate

# Windows (PowerShell)
myproject-env\Scripts\Activate.ps1

# Linux/Mac
source myproject-env/bin/activate

# When activated, your prompt shows the environment name:
(myproject-env) C:\projects\myapp>

INSTALL PACKAGES:
# Install specific package
pip install requests

# Install from requirements file
pip install -r requirements.txt

# Install in development mode
pip install -e .

LIST INSTALLED PACKAGES:
pip list
pip freeze > requirements.txt

DEACTIVATE ENVIRONMENT:
deactivate

DELETE ENVIRONMENT:
# Simply delete the environment folder
rmdir /s myproject-env    # Windows
rm -rf myproject-env      # Linux/Mac

=== USING CONDA ===

CREATE ENVIRONMENT:
# Create with specific Python version
conda create -n myproject python=3.9

# Create from environment file
conda env create -f environment.yml

ACTIVATE/DEACTIVATE:
conda activate myproject
conda deactivate

INSTALL PACKAGES:
# Install from conda-forge
conda install -c conda-forge requests

# Install with pip inside conda env
pip install some-package

LIST ENVIRONMENTS:
conda env list

REMOVE ENVIRONMENT:
conda remove -n myproject --all

=== BEST PRACTICES ===

NAMING CONVENTIONS:
✓ Use descriptive names: myproject-env, web-scraper-env
✓ Include version if needed: myapp-py39
✓ Use .venv for local development (hidden folder)

PROJECT STRUCTURE:
myproject/
├── .venv/              # Virtual environment
├── src/                # Source code
├── tests/              # Test files
├── requirements.txt    # Dependencies
├── .gitignore         # Git ignore rules
└── README.md          # Project documentation

REQUIREMENTS MANAGEMENT:
# Create requirements file
pip freeze > requirements.txt

# Install from requirements
pip install -r requirements.txt

# Development vs production requirements
requirements/
├── base.txt           # Common dependencies
├── dev.txt            # Development dependencies
└── prod.txt           # Production dependencies

GITIGNORE VIRTUAL ENVIRONMENTS:
# Add to .gitignore
.venv/
venv/
env/
ENV/

=== COMMON WORKFLOWS ===

NEW PROJECT SETUP:
1. mkdir myproject && cd myproject
2. python -m venv .venv
3. .venv\Scripts\activate  (Windows) or source .venv/bin/activate
4. pip install required-packages
5. pip freeze > requirements.txt
6. Add .venv/ to .gitignore

EXISTING PROJECT:
1. git clone project-repo
2. cd project-repo
3. python -m venv .venv
4. .venv\Scripts\activate
5. pip install -r requirements.txt

SHARING PROJECT:
1. pip freeze > requirements.txt
2. Commit requirements.txt to git
3. Others can recreate with: pip install -r requirements.txt

=== TROUBLESHOOTING ===

COMMON ISSUES:

Environment not activating:
- Check if activation script exists
- Use correct path separators for your OS
- Run as administrator if permission issues

Packages not found after activation:
- Verify environment is activated (check prompt)
- Reinstall packages in activated environment
- Check Python path: python -c "import sys; print(sys.path)"

Permission errors:
- Run terminal as administrator (Windows)
- Check file permissions (Linux/Mac)
- Use --user flag: pip install --user package-name

Multiple Python versions:
- Specify Python version: python3.9 -m venv .venv
- Use py launcher (Windows): py -3.9 -m venv .venv
- Check Python version: python --version

=== ENVIRONMENT FILES ===

REQUIREMENTS.TXT:
# Production dependencies
requests==2.28.1
flask==2.2.2
gunicorn==20.1.0

# Development dependencies (in separate file)
pytest==7.1.2
black==22.6.0
flake8==5.0.4

ENVIRONMENT.YML (Conda):
name: myproject
dependencies:
  - python=3.9
  - requests
  - flask
  - pip
  - pip:
    - some-pip-only-package

PYPROJECT.TOML (Poetry):
[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.28.0"
flask = "^2.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.1.0"
black = "^22.6.0"

=== QUICK REFERENCE ===

VENV COMMANDS:
python -m venv .venv              # Create environment
.venv\Scripts\activate            # Activate (Windows)
source .venv/bin/activate         # Activate (Linux/Mac)
pip install package-name          # Install package
pip freeze > requirements.txt     # Save dependencies
deactivate                        # Deactivate environment

CONDA COMMANDS:
conda create -n myenv python=3.9  # Create environment
conda activate myenv               # Activate
conda install package-name        # Install package
conda list                        # List packages
conda deactivate                  # Deactivate

PROJECT CHECKLIST:
□ Create virtual environment
□ Activate environment before installing packages
□ Keep requirements.txt updated
□ Add virtual environment folder to .gitignore
□ Document setup process in README
□ Test environment setup on clean machine

Virtual environments are essential for Python development. They prevent dependency
conflicts, ensure reproducible builds, and keep your projects organized and isolated.
Always use them for any